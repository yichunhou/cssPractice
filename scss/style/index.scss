@charset 'UTF-8';
// sccs中的语法

// 1.变量

// 1.1基本用法-全局变量
$red-color: red;  // 单个属性
$blue-border: 1px solid blue; // 多个属性组成
$font-size: "Myriad Pro" Myriad "Helvetica Neue"、Helvetica、"Liberation Sans" Arial;
$width: 400px;
.parent { 
  color:$red-color;
  border: $blue-border;
  font: $font-size;
}
// 1.2局部变量
.child-1 {
  $width: 200px;  // 局部变量，块内使用，块外使用不到
  width: $width;  //优先从块内寻找，找不到从块外寻找
  border: $blue-border;
}
.child-2 {
  width: $width;  // 使用的是全局变量
  border: $blue-border;
}
// 1.3变量可以相互引用
$green-color: green;
$green-border: 1px solid $green-color;
.child-3 {
  border: $green-border;
}
// 1.4变量的命名形式 
//   1）中划线 或 下划线 如 $link-color 或 $link_color
//   2）使用中$link-color 和 $link_color 指向的是同一变量，即是互通的，除变量外 混合器和函数的命名同样如此。但在sass中纯css部分不互通，如类名、id或属性名
  // 3) 由于$link-color和$link_color其实指向的都是一个变量，所以在命名变量的时候，前一个会被后一个覆盖

$marginLeft-20: 20px;
$marginLeft_20: 40px; // 后面的覆盖前面的
.child-4 {
  margin-left: $marginLeft-20;  // 其实都是40px;
}
.child-5 {
  margin-left: $marginLeft_20; // 其实都是40px;
}

// 2.样式的嵌套
// 不知道的几点用法：
// 2.1 属性的嵌套
.parent {
  .child-2 {
    border: { // 相当于 border: 1px solid skyBlue;
      style: solid;
      width: 1px;
      color: skyBlue;
    }
    margin: 20px {
      left: 40px; // 相当于 margin: 20px; margin-left: 40px; 的结合
    }
  }
}
// 2.2 父元素（&）在嵌套中的不同位置会被替换指定的元素。
.child-4 {
  &:hover { // 相当于 .child-4:hover { color: palegreen;}
    color: palegreen;
  }
  .parent & { // 相当于 .parent .child-4 { backgroung-color: purple;}
    background-color: purple;
  }
}


// 3.导入

/**
 * 约定：对于@import 引入的sass文件，通常情况下，我们很多其他页面需要用到，而这些@import引入的文件仅做导入使用，并不需要生成对应的css文件。
 * 对于这样的sass文件，我们称之为局部文件；
 * 局部文件的文件名以下划线开头，这样sass文件在编译时就不会单独编译这个文件输入css，而是把这个文件用作导入
 */

// 3.1 默认变量值

/**
 * 通过@import 我们可能会导入多个scss文件，导致命名的变量重复，如果重复声明一个变量，后面的变量值会覆盖前面的，
 * 为不影响原先的设计，可以使用 !default 来指定默认值（表示：如果这个变量被声明赋值了，那就用它声明的值，否则就用这个默认值。）
 */
$bgc-color: skyBlue;
$bgc-color: #ccc !default;
.parent {
  .child-6 {
    background-color: $bgc-color; // 此时颜色是skyBlue，而不是#ccc，因为$bgc-color之前已经申明赋值过了
  }
}

// 3.2嵌套导入
// @import 可以使用在css规则内，导入的文件会对应的替换到css规则内，但对外部其余元素不影响，类似于之后的混入
.parent {
  @import './_theme'; // 这个文件以 "_"开头，文件目录里面没有生成对应的css文件，即只做导入使用。
}
/* 原生CSS导入的问题： 
  由于sass兼容原生的css，所以它也支持原生的CSS@import。尽管通常在sass中使用@import时，sass会尝试找到对应的sass文件并导入进来，但在下列三种情况下会生成原生的CSS@import，尽管这会造成浏览器解析css时的额外下载：
  1）被导入文件的名字以.css结尾；（可以将原来的css样式重命名为scss结尾
  2）被导入文件的名字是一个URL地址（比如http://www.sass.hk/css/css.css），由此可用谷歌字体API提供的相应服务；
  3）被导入文件的名字是CSS的url()值。 
*/

// 4. 注释
// css的标准注释格式： /* ... */ , 这种注释在生成的css文件中会显示，
// 静默注释,不会在生成的css文件中显示。即：// 
// /** */ 这种注释如果出现在原生css不允许的地方，如 选择器或属性中，也不会再生成的css文件中显示，因为编译器不知该如何解析。
.child-8 {
  color /* 这块注释内容不会出现在生成的css中 */: #333;
  padding: 1 /* 这块注释内容也不会出现在生成的css中 */ 0;
  font-style: italic; /* 斜体，这个注释会显示 */
}

// 5.混入
/**
 * 通过@mixin 来定一个混入器的样式。 通常用于将一段重复利用的代码抽离出来，进行共用，类似于js中的类的作用
 * 在需要的样式中通过 @include 混入器名字 俩进行引用
 */
// 5.1 基本用法
@mixin rounded-corners {
  -moz-border-radius: 10px;
  -webkit-border-radius: 10px;
  border-radius: 10px;
}
.child-9 {
  background-color: #ddd;
  padding: 10px;
  width: 200px;
  margin: auto;
  text-align: center;
  @include rounded-corners;
}

// 5.2 混合器传参
/**
 * 1)直接传参
 * 2）避免传错，可以通过key:value的形式进行传参
 */
@mixin link-colors($normal, $hover, $visited) {
  color: $normal;
  &:hover { color: $hover; }
  &:visited { color: $visited; }
}
.child-9 {
  @include link-colors(blue, red, green); // 第一种传参方式
  @include link-colors( // 第二种传参方式
    $normal: blue,
    $visited: green,
    $hover: red
  );
}

// 5.3 默认参数值
/**
 * 在传参时，我们也可以像js中的函数传参时一样，指定参数的默认值
 */
@mixin link-colors($normal, $hover: $normal, $visited: $normal){
  color: $normal;
  &:hover { color: $hover; }
  &:visited { color: $visited; }
}
.child-10 {
  @include link-colors(blue); // 第一种传参方式
}


// 6. 继承
/**
 * 继承和混入有些类似，都是为了简化样式表，但有些不同
 * 1）混入是将定义的样式重复性的插入到定义的样式表中去， 继承而是对选择器添加对应的类名，不会重复性的插入样式，因此继承生成的css样式体积更小
 * 2）使用继承容易造成生成的css中包含大量的选择器复制，避免措施：不要在css规则中使用后代选择器（比如.foo .bar）去继承css规则。如果你这么做，同时被继承的css规则有通过后代选择器修饰的样式，生成css中的选择器的数量很快就会失控：（官方文档）
 */

// 错误示例:
.child-12 .span-12 {
  color: #ccc;
  font-weight: 600;
}
.child-13 .span-13 {
  @extend .span-12;
}

/**
 * 编译后的样式
 * 
 * .child-12 .span-12, .child-12 .child-13 .span-13, .child-13 .child-12 .span-13 {
 *   color: #ccc;
 *   font-weight: 600;
 * }
 * 
 */

